
==========================================================================================
==========================================================================================
==========================================================================================

[ĐỆ QUY - RECURSION]

Phương pháp gọi lại chính mình với một quy mô khác (nhỏ hơn), đến một lúc nào đó thì sẽ dừng và bắt đầu hồi / dội ngược trở lại.

Giống như Búp bê Matryoska / Búp bê Nga / Búp bê babushka / Búp bê lồng nhau / Búp bê làm tổ / Búp bê xếp chồng / Búp bê trà Nga, khi con búp bê nhỏ nhất sẽ được chứa đựng trong lòng con búp bê lớn hơn nó một chút, đến lượt con búp bê lớn lại được chứa trong một con búp bê khác lớn hơn, cứ thế lặp và con lớn nhất sẽ chứa tất cả những con búp bê còn lại trong bộ.

* Đệ quy (Recursion): phương pháp gọi lại chính mình với quy mô khác.
	- Bảo làm một việc gì đó thì không chịu làm, mà lại đi làm một chuyện tương đương nhưng với quy mô khác (nhỏ hơn).
	- Gọi lại chính mình với một giá trị đầu vào khác biệt sau mỗi lần, liên tục như thế cho đến khi thoả mãn điều kiện dừng.
	- Bắt buộc phải có điều kiện dừng, nếu không sẽ vĩnh viễn không thể thoát ra được.

	Ví dụ:
		5! = 1 * 2 * 3 * 4 * 5 = 120
		5! = 5 * 4!
		4! = 4 * 3!
		3! = 3 * 2!
		2! = 2 * 1!
		1! = 1 -> Điểm dừng của đệ quy

		n! = n * (n - 1)! -> Công thức lặp lại chính mình

--------------------------------------------------------------------------------

Cần xác định được:
	1. Trường hợp cơ sở / cơ bản (Basic Case): có thể trả về kết quả trực tiếp.
	2. Trường hợp tổng quát (General Case): chứa câu lệnh để tự gọi lại hàm đệ quy.
	-> Gọi lại chính mình để làm đơn giản hoá / tinh giản độ phức tạp.
		(Bắt đầu từ tổng quát, sau đó quy về cơ bản.)

==========================================================================================
==========================================================================================
==========================================================================================

[CON TRỎ & CẤP PHÁT ĐỘNG]

Vì bản chất chỉ cấp phát một vùng nhớ với số lượng phần tử đúng bằng số lượng thực tế cần sử dụng, nên việc thêm hoặc xoá phần tử đối với mảng động sẽ phức tạp hơn so với mảng tĩnh.

--------------------------------------------------------------------------------

	[THÊM PHẦN TỬ]

* Các bước để thêm một phần tử vào mảng động:

	1. Nới rộng thêm ô nhớ cho vùng nhớ *.
	2. Dời các ô nhớ về phía sau (bên phải) để tạo khoảng trống.
	3. Thêm phần tử vào vị trí được chỉ định trong mảng.
	4. Tăng tổng số lượng phần tử thực tế của mảng lên.

	* Thuật toán nới rộng thêm ô nhớ cho vùng nhớ được cấp phát động:

		1. Tạo ra một mảng phụ với số lượng phần tử tương đương với mảng gốc.
		2. Dời toàn bộ phần tử của mảng gốc sang mảng phụ.
			- Không thể sử dụng phép gán bằng '=' đối với tên mảng.
			- Phải gán lần lượt từng phần tử.
		3. Phải phóng vùng nhớ trước đó của mảng gốc.
		4. Cấp phát lại vùng nhớ mới cho mảng gốc.
			- Cần phải truyền tham chiếu để lưu lại việc mảng bị thay đổi vùng nhớ.
		5. Trả toàn bộ giá trị từ mảng phụ về mảng gốc.

		-> Lưu lại toàn bộ giá trị sang một mảng phụ và sau đó cấp phát lại mảng gốc để tránh bị mất dữ liệu.

--------------------------------------------------------------------------------

Để cấp phát vùng nhớ động cho con trỏ thông qua một hàm, ta có hai cách:

	1. Sử dụng tham chiếu: int*& a;

	2. Sử dụng con trỏ cấp hai: int** a; (để biết đây là một mảng, vì int* a sẽ không thể phân biệt đây là một con trỏ hay một mảng)
		- Phần thân hàm phải sử dụng con trỏ cấp một để tương tác: *a;
		- Nơi gọi hàm phải truyền vào tham số dạng địa chỉ thông qua toán tử &a.

------------------------------------------------------------

* Lưu ý:

	- Khi truyền con trỏ vào trong hàm, bản chất vẫn là truyền tham trị (giá trị / miền giá trị của biến con trỏ) vào trong hàm.

		+ Khi truyền mảng vào hàm - đây là truyền tham chiếu, nhưng khi truyền con trỏ vào hàm - đây lại là truyền tham trị.

		+ Vì bản chất vẫn là truyền tham trị, địa chỉ của biến sẽ được sao chép vào hàm và mọi thay đổi của hàm lên biến con trỏ sẽ mất đi khi kết thúc hàm.

		+ Nếu hàm có thay đổi biến con trỏ và muốn giữ lại những thay đổi ấy (ví dụ: gộp mảng...), bắt buộc phải sử dụng thêm toán tử '&'.

		-> Con trỏ vẫn phải truyền tham chiếu vào hàm khi muốn thay đổi giá trị.

==========================================================================================
==========================================================================================
==========================================================================================

[MẢNG NHIỀU CHIỀU / MA TRẬN - MULTIDIMENSIONAL ARRAYS / MATRIX]

Bên cạnh một chiều đi từ trái sang phải giống như mảng một chiều, chiều còn lại của mảng hai chiều sẽ đi từ trên xuống dưới.

	- Được tạo thành bằng cách xếp chồng nhiều mảng một chiều có cùng kích thước lại với nhau.

	- Để truy xuất được bất kì phần tử nào trong mảng hai chiều, bên cạnh chỉ số cột như truyền thống, ta còn cần thêm chỉ số dòng (dòng trước, cột sau - m[chỉ-số-dòng][chỉ-số-cột]).

	-> Mảng hai chiều là tập hợp của nhiều mảng một chiều.

	Ví dụ:

			   0     1     2     3     4
		     cột------------------------------>
			
	   dòng / hàng	―――――――――――――――――――――――――――――――
	     0	|	│     │     │     │     │     │     <- Một mảng một chiều
		|	―――――――――――――――――――――――――――――――
	     1	|	│     │     │     │     │     │     <- Một mảng một chiều
		|	―――――――――――――――――――――――――――――――
	     2	|	│     │     │     │     │     │     <- Một mảng một chiều
		|	―――――――――――――――――――――――――――――――
	     3	|	│     │     │     │     │     │     <- Một mảng một chiều
		v	―――――――――――――――――――――――――――――――        ------------------
							       Bốn mảng một chiều
							       được xếp chồng lên nhau


	* Cú pháp:
		<kiểu-dữ-liệu> <tênMảng>[<kích-thước-dòng><kích-thước-cột>]

		Ví dụ: khai báo mảng số nguyên chứa tối đa 4 dòng và 5 cột
			int mangSoNguyen[4][5]; // Chứa được tối đa 20 phần tử

* Nếu mảng hai chiều có số dòng bằng với số cột thì được gọi mà ma trận vuông.

	- Khi chỉ số dòng và cột trùng nhau (ví dụ: a[1][1], a[2][2]...) sẽ tạo nên:
		+ Đường chéo chính: đường chéo xuất phát từ góc trên bên trái xuống góc dưới bên phải.

	- Khi chỉ số dòng và cột ... (ví dụ: a[0][3], a[1][2]...) sẽ tạo nên:
		+ Đường chéo phụ: đường chéo xuất phát từ góc trên bên phải xuống góc dưới bên trái.

--------------------------------------------------------------------------------

[KHAI BÁO & KHỞI TẠO GIÁ TRỊ CHO MẢNG HAI CHIỀU]

Đối với số lượng phần tử, ta có hai cách để khai báo trong mảng hai chiều.

	1. Khai báo và khởi tạo mặc định.

		- Nếu không truyền đủ các phần tử, giá trị mặc định của các phần tử bị thiếu sẽ là 0.

		Ví dụ:
			// Cách 1
			a[4][3] = {
					{1, 2, 3},
					{3, 4, 5},
					{5, 6, 7},
					{7, 8, 9}
				  };

			// Cách 2
			a[4][3] = {1, 2, 3, 3, 4, 5, 5, 6, 7, 7, 8, 9};

			// Cách 3 - Không cần chỉ định chỉ số dòng
			a[][3] = {1, 2, 3, 3, 4, 5, 5, 6, 7, 7, 8, 9};

			// Cách 4 - Truyền thiếu giá trị cho phần tử
			a[][3] = {1, 2, 3};

	2. Cho phép nhập từ bàn phím.

		Ví dụ:
			a[SO_DONG_TOI_DA][SO_COT_TOI_DA];
			int soDongThucTe, soCotThucTe;

			cin >> soDongThucTe;
			cin >> soCotThucTe;

			nhapMang(int a[SO_DONG_TOI_DA][SO_COT_TOI_DA], int soDongThucTe, int soCotThucTe);
			xuatMang(int a[SO_DONG_TOI_DA][SO_COT_TOI_DA], int soDongThucTe, int soCotThucTe);

--------------------------------------------------------------------------------

[NHẬP & XUẤT MẢNG HAI CHIỀU]

* Khi truyền mảng hai chiều vào hàm làm tham số, ta có quyền...

	- Truyền mảng với với đầy đủ số dòng và số cột.
		Ví dụ: a[SO_DONG_TOI_DA][SO_COT_TOI_DA]

	- Bỏ trống số dòng, vì từ số cột được quy định ta sẽ có thể suy ra được số dòng.
		Ví dụ: a[][SO_COT_TOI_DA]

------------------------------------------------------------

	[NHẬP MẢNG]

void nhapMang(int a[SO_DONG_TOI_DA][SO_COT_TOI_DA], int soDongThucTe, int soCotThucTe)
{
	// Để nhập từng giá trị cho mảng hai chiều,
	// cần phải biết giá trị đó nằm ở dòng và cột nào

	// Vì vậy, ta sẽ sử dụng hai vòng lặp lồng nhau
	// để duyệt từng giá trị

	// Duyệt từng dòng
	for (int i = 0; i < soDongThucTe; i++)

		// Duyệt từng cột (của từng dòng)
		for (int j = 0; j < soCotThucTe; j++)
		{
			// Yêu cầu nhập giá trị
			// cho từng phần tử trong mảng
			cout << "Vui long nhap phan tu a[" << i + 1 << "][" << j + 1 << "]: ";
			cin >> a[i][j];
		}
}

------------------------------------------------------------

	[XUẤT MẢNG]

void xuatMang(int a[SO_DONG_TOI_DA][SO_COT_TOI_DA], int soDongThucTe, int soCotThucTe)
{
	// Duyệt từng dòng
	for (int i = 0; i < soDongThucTe; i++)
	{
		// Duyệt từng cột (của từng dòng)
		for (int j = 0; j < soCotThucTe; j++)

			// In giá trị vừa mới duyệt ra
			cout << a[i][j] << "\t";

		// Sau khi in ra hết số cột trên một dòng,
		// mới tiến hành xuống hàng
		// để tiếp tục in ra số cột cho dòng mới
		cout << endl;
	}
}

--------------------------------------------------------------------------------

==========================================================================================
==========================================================================================
==========================================================================================

[CHUỖI - STRING]

Tuy không trực tiếp có kiểu dữ liệu chuỗi, nhưng ngôn ngữ C++ đã cung cấp sẵn một lớp (thư viện) String.

	- Bên cạnh việc tương tác với chuỗi (mảng kí tự) một cách truyền thống, ta có thể sử dụng thư viện String với sự hỗ trợ của các hàm được xây dựng sẵn để tương tác với chuỗi.

		Ví dụ: các hàm có sẵn trong thư viện String
			// Để lấy độ dài của chuỗi
			length();

==========================================================================================
==========================================================================================
==========================================================================================

[KIỂU DỮ LIỆU NGƯỜI DÙNG TỰ ĐỊNH NGHĨA - STRUCT & CLASS]

==========================================================================================

[CẤU TRÚC - STRUCT]

Là một dạng kiểu dữ liệu mà ngôn ngữ lập trình cho phép lập trình viên tự thiết kế / định nghĩa theo nhu cầu.

	- Là cơ sở của lập trình hướng đối tượng (Object-oriented programming - OOP) - Lớp (Class).

	- Đối với những kiểu dữ liệu cơ sở được ngôn ngữ lập trình cung cấp sẵn, ta chỉ có thể khai báo và lưu các giá trị tương ứng với kiểu dữ liệu đó.

		Ví dụ:
			- Kiểu dữ liệu số nguyên: chỉ lưu được những số nguyên.
			- Kiểu dữ liệu số thực: chỉ lưu được những số thực.
			- Kiểu dữ liệu kí tự: chỉ lưu được những kí tự.
			- Kiểu dữ liệu luận lý: chỉ lưu được hai trạng thái đúng và sai.

			-> Không thể lưu được lẫn lộn kiểu dữ liệu.

	- Nhưng mỗi đối tượng khác nhau lại có thông tin khác nhau và rất phức tạp. Vì vậy, để lưu được thông tin của một đối tượng, ta phải sử dụng một kiểu dữ liệu mới do ta tự định nghĩa.

		Ví dụ: để lưu thông tin của một sinh viên.
			Mã số sinh viên -> Chuỗi
			Tên sinh viên -> Chuỗi
			Điểm trung bình -> Số thực
			Số tín chỉ -> Số nguyên
			...

			-> Sử dụng một kiểu dữ liệu đặc biệt để lưu cùng một lúc nhiều kiểu dữ liệu khác nhau.

	- Cấu trúc (Struct) sẽ giúp tiện lợi hơn trong việc khai báo và quản lý thông tin, sau đó có thể dễ dàng truy xuất và xử lý trên một loạt giống như xử lý trên một mảng.

--------------------------------------------------------------------------------

* Cú pháp khai báo:
	struct <TênBiếnCấuTrúc>
	{
		kiểu-dữ-liệu-thành-phần tênThànhPhần;
		...
	};

	Ví dụ: định nghĩa cấu trúc SinhVien.

		struct SinhVien
		{
			string maSoSinhVien;
			string tenSinhVien;
			double diemTrungBinh;
			int soTinChi;
		};

* Cú pháp truy xuất:
	TênBiếnCấuTrúc.tênThànhPhần;

	Ví dụ:
		// Phải được truyền tham chiếu
		// để những gì được nhập vào sẽ được lưu
		void nhapThongTinChoMotSinhVien(SinhVien &sv)
		{
			getline(cin, sv.hoTen);
			cin >> sv.soTinChi;
		}

--------------------------------------------------------------------------------

[GÁN KIỂU DỮ LIỆU STRUCT]

Vì Struct cũng là kiểu dữ liệu, nên ta hoàn toàn có thể gán các đối tượng của Struct cho nhau, giống như việc gán giá trị cho hai biến có cùng kiểu dữ liệu.

* Có hai cách để gán dữ liệu cho một đối tượng trong Struct.

	1. Gán toàn bộ thành phần.

		Ví dụ:
			SinhVien sv1;
			SinhVien sv2;

			sv2 = sv1;

		* Lưu ý: với cách gán này, nếu trong Struct đang chứa một biến con trỏ thì ta lại không thể gán giá trị giữa các đối tượng cho nhau. Vì bán chất của con trỏ là sẽ truyền địa chỉ và sẽ khiến mọi thay đổi đều ảnh hưởng đến nhau, mà toán tử bằng '=' ngầm định bên trong sẽ gán địa chỉ cho nhau thay vì tự động sử dụng thêm toán tử '*' để gán giá trị.

	2. Gán từng thành phần.

		Ví dụ:
			SinhVien sv1;
			SinhVien sv2;

			sv2.maSoSinhVien = sv1.maSoSinhVien;
			sv2.tenSinhVien = sv1.tenSinhVien;

			// ĐÚNG | Sử dụng toán tử '*' và lấy giá trị bên trong để gán
			(*sv2.soTinChi) = (*sv1.soTinChi);

			// SAI | Lấy địa chỉ bên trong để gán
			//		-> Gây lỗi đồng nhất về bộ nhớ
			(sv2.soTinChi) = (sv1.soTinChi);

		* Lưu ý: với cách gán này, nếu trong Struct đang chứa một biến con trỏ thì ta vẫn có thể gán giá trị giữa các đối tượng cho nhau, vì ta có thể chủ động sử dụng thêm toán tử '*' để gán giá trị thay vì địa chỉ như mặc định.

--------------------------------------------------------------------------------

* Lưu ý:
	- Nếu trong hàm có sử dụng Struct, phần nguyên mẫu Struct nên được khai báo trước khi bắt đầu khai báo nguyên mẫu hàm.

	- Từ khoá typedef được sử dụng để định dạng lại kiểu Struct, giống như cách đặt tên giả (giống như "using namespace std;").

		+ Thường sử dụng khi thiết kế Struct bằng ngôn ngữ C++ và đem sang ngôn ngữ C để thực thi.

		+ Mục đích là để các trình biên dịch thuần C có thể hiểu và thực thi mà không cần phải khai báo quá dài khi sử dụng.

		+ Giống như việc gom từ khoá struct + TênBiếnCấuTrúc và đặt một tên giả, từ đấy chỉ cần sử dụng tên giả để tương tác thay vì luôn luôn phải khai báo đầy đủ cấu trúc.

		Ví dụ: khai báo struct trên các trình biên dịch thuần C.

			struct sinhvien {...};

			// Khi không có từ khoá typedef
			void nhapThongTinMotSinhVien (struct sinhvien &sv);

			// Khi đã có từ khoá typedef
			typedef struct sinhvien SinhVien;
			void nhapThongTinMotSinhVien (SinhVien &sv);

	- 

==========================================================================================

--------------------------------------------------------------------------------

------------------------------------------------------------

----------------------------------------

--------------------

----------






















